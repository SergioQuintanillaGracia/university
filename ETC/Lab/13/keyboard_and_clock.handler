## ESTRUCTURA DE COMPUTADORES   (ETSInformatica)
##  
##
## LAB 13. Interrupt synchronisation
##
## Initial handler code


##############################################################
##                  HANDLER DATA SEGMENT                    ##
##############################################################

			.kdata
var1:	.word 0xFFFFFFFF
context: .space 20

##############################################################
##                       HANDLER CODE                       ##
##############################################################

          .ktext 0x80000080

    ## Save the user program context
    .set noat
    sw $at, 0($k1)
    .set at
    sw $t0, 4($k1)
    sw $a0, 8($k1)
    sw $v0, 12($k1)
    sw $t1, 16($k1)

    ## Identify and handle exceptions
    # Move the $Cause register (13) to register $t0
    mfc0 $t0, $13
    # Check if the exception is an interruption
    andi $t1, $t0, 0x3C
    bnez $t1, retexc
    # Check if int0 produced the interruption
    andi $t1, $t0, 0x400
    bnez $t1, int0
    # Check if int2 produced the interruption
    andi $t1, $t0, 0x1000
    bnez $t1, int2
    # Interruption wasn't caused by known int lines, return
    j retexc

int0:
    li $v0, 11
    li $a0, '*'
    syscall

    # Cancel keyboard ready bit
    li $t0, 0xFFFF0000
    lw $t0, 4($t0)

    j retexc

int2:
    # Cancel clock ready bit
    li $t0, 0xFFFF0010
    li $t1, 0x1
    sw $t1, 0($t0)
    j retexc

retexc:
    ## Restore context
    .set noat
    lw $at, 0($k1)
    .set at
    lw $t0, 4($k1)
    lw $a0, 8($k1)
    lw $v0, 12($k1)
    lw $t1, 16($k1)

    ## Set user mode and return to the user program
    ## (to be completed)
	rfe  # (Restore From Exception)
	mfc0 $k0, $14
	jr $k0

#############################################################
## STARTUP, USER-PROGRAM INVOCATION, AND TERMINATION CODE  ##
#############################################################

          .text
          .globl __start 
__start: 
    ## Initialisation code
    # Load $k1 with the address of context
    la $k1, context
	
    # Set Status IM0 and IM2 bit to 1, and IEc bit to 1 as well
	# We also have to set the bit KUc to 1 to go from kernel to user mode
	# We therefore have to load 0x503 in mtc0
	li $t0, 0x503
	mtc0 $t0, $12  # 12 is the Status register
	
	# Enable interruptions in the keyboard peripheral
	li $t0, 0xFFFF0000
	li $t1, 0x2
	sw $t1, 0($t0)
	
    # Enable clock interruptions
    li $t0, 0xFFFF0010
    li $t1, 0x1
    sw $t1, 0($t0)

    ## Jump to user program
	jal main
	

    ## Ending code
	li $v0, 10
	syscall	 # exit function
