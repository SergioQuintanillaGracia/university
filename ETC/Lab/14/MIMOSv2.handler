###
### ESTRUCTURA DE COMPUTADORES (ETSInf)
###
### LAB 14: SYSTEM CALLS (I) 
###
### MiMoS v.0
###

##############################################################
##              HANDLER DATA AREA                           ##
##############################################################

		.kdata

		## Context of user process "Main"

savereg:	.word 0,0,0		# Space for $at, $t1 and $t0
retaddr:	.word 0			# To store the return address

		## Possible states of Main

		READY  	= 0	
		WAITING	= 1
			

state:		.word READY		# State of Main, initially READY 

	## Clock variables
seconds: 	.word 0			# Counts the enlapsed seconds
alarm: 		.word 0

	## Keyboard variables


	## Console variables


#############################################################
##           HANDLER CODE                                  ##
#############################################################

          .ktext 0x80000080

## $lbl: j $lbl  	# Keep this line as a comment, 
					# unless otherwise indicated.


## Save context

	.set noat
	sw $at,0($k1)	      	# Save $at
	.set at
	sw $t0,4($k1)			# Save $t0 - will be used for addresses
	sw $t1,8($k1)			# Save $t1 - will be used for data

## Exception cause analysis

	mfc0 $k0,$13			# Read cause register to $k0
	andi $t0,$k0, 0x003c	# Isolate cause code
	beq $t0,$zero,interrupt # Hardware interrupt?  
	li $t1, 0x20			 
	beq $t1, $t0, sysfun    # System function?

	b retexc			    # Any other causes are ignored   

#############################################################
##                   INTERRUPT HANDLING                    ##
#############################################################

interrupt:      

## Save return address (only if Main was interrupted, i.e., it was READY)

	lw $t0,state
	li $t1,READY
	bne $t0,$t1,$L1
	mfc0 $t0, $14			# EPC
	sw $t0, retaddr

## Analysis of pending interrupts

$L1:
	andi $t0, $k0, 0x1000	# int2 pending?
	bne  $t0, $zero, int2
	andi $t0, $k0, 0x800		# int1 pending?
	bne  $t0, $zero, int1
	andi $t0, $k0, 0x400		# int0 pending?
	bne  $t0, $zero, int0
	b retexc					# Any other interrupts are ignored

#-------------------------------------------------------------

## CLOCK interrupt handling

int2:
	# Update seconds
	lw $t1, seconds
	addi $t1, $t1, 1
	sw $t1, seconds

	# Cancel interrupt (but keep clock interrupts enabled)
	la $t0, 0xffff0010
	li $t1, 1
	sb $t1, 0($t0)

	lw $t0, state
	li $t1, READY
	# If the state is READY, return
	beq $t0, $t1, end_int2
	# At this point in the code, the state is WAITING
	# If seconds < alarm, return
	lw $t0, seconds
	lw $t1, alarm
	blt $t0, $t1, end_int2
	# At this point in code, state = WAITING && seconds >= alarm
	# Switch the state to ready
	li $t0, READY
	sw $t0, state
	
end_int2:
	b retexc			# end

## KEYBOARD interrupt handling

int0:
	# To do
	b retexc			# end

## CONSOLE interrupt handling

int1:
	# To do
	b retexc			# end


#############################################################
##                    SYSTEM FUNCTIONS                     ##
#############################################################

sysfun:

## Prepare return address

	mfc0 $k0, $14		# EPC
	addi $k0,$k0,4
	sw $k0, retaddr

## Identify which system function was called

	li $t1,11				# print_char?
	beq $t1, $v0, print_char
    li $t1,12				# read_char?
	beq $t1, $v0, read_char
	li $t1,90				# get_version?
	beq $t1, $v0, get_version
	li $t1,91				# get_time?
	beq $t1, $v0, get_time
	li $t1,92				# wait_time?
	beq $t1, $v0, wait_time
	b retexc				# System function not implemented

#---------------------------------------------------------------

###### PRINT_CHAR (system call 11)

print_char:
	li $t0, 0xffff0008
$L0:
	lb $t1, 0($t0)   		# Poll console ready bit
	andi $t1, $t1, 1
	beq $t1, $zero, $L0

	sb $a0, 4($t0)			# Do print
	b retexc

###### READ_CHAR (system call 12)

read_char:
        # To do
        b retexc

###### GET_VERSION (system call 90)

get_version:
	li $v0, 2
	b retexc


###### GET_TIME (system call 91)

get_time:
	lw $v0, seconds
	b retexc
	

###### WAIT_TIME (system call 92)

wait_time:
	# Set state to waiting
	li $t0, WAITING
	sw $t0, state

	# Configure alarm
	lw $t0, seconds
	add $t0, $t0, $a0
	sw $t0, alarm

	b retexc


#############################################################
##             CONTEXT SWITCH AND HANDLER COMPLETION       ##
#############################################################

retexc:

## CONTEXT SWITCH

	lw $t0,state
	li $t1,READY
	beq $t0,$t1,$L2		# If (state == READY), go back to main process

	la $k0, idle_process
	b $L3			    # otherwise, go back to void process
         
$L2:
	lw $k0,retaddr		# retaddr contains return address to Main 


## Restore the context

$L3:	
	lw $t1, 8($k1)		# Restore $t1
	lw $t0, 4($k1)		# Restore $t0
	.set noat
	lw $at, 0($k1)		# Restore $at
	.set at
	rfe			        # Restore bits KU/IE
	jr $k0



##############################################################
##                       INITIALISATION                     ##
##############################################################

          .text
          .globl __start 
__start: 

## Prepare peripheral interfaces

	li $t0, 0xffff0000
	sb $zero, 0($t0)	# Disable KEYBOARD hardware interrupt

	li $t0, 0xffff0008
	sb $zero, 0($t0)	# Disable CONSOLE hardware interrupt

	li $t0, 0xffff0010
	li $t1, 1
	sb $t1, 0($t0)	# Enable CLOCK hardware interrupt


##  Use $k1 as pointer to context area

	la $k1, savereg	        # $k1 points to context area

## Prepare coprocessor Status register and user mode

	mfc0 $t0, $12
	ori $t0, $t0, 0x0403  # Enable ints., but keep all masked, EXCEPT THE CLOCK. Set User mode
	mtc0 $t0, $12

## Jump to user program

	jal main


## Shutdown

	li $v0, 10
	syscall			# syscall 10 (exit)


###############################################################
##                  SYSTEM IDLE PROCESS                      ##
###############################################################

idle_process: 
	b idle_process
