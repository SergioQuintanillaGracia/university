%{
/**
 * @file input.lex.l
 *
 * Departamento de Informática de Sistemas y Computadores (DISCA)
 * Universidad Politécnica de Valencia.
 *
 * @author Sergio Sáez <ssaez@disca.upv.es>
 * @author Pedro López <plopez@disca.upv.es>
 *
 * @brief
 *    Contiene la descripción léxica del lenguaje ensamblador
 *
 * DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
 *
 * @copyright [CC BY-NC-ND 4.0]
 *   Esta obra está bajo una licencia de Creative Commons Atribución-NoComercial-SinDerivadas
 *   Para evitar dudas, no se tiene permiso bajo esta Licencia para compartir Material Adaptado.
 *   Más detalles en https://creativecommons.org/licenses/by-nc-nd/4.0/legalcode.es
 */

/*** Includes */

#include <ctype.h>
#include <string.h>
#include <inttypes.h>
#include "input.yacc.h"
#include "instrucciones.h"
#include "codop.h"
#include "registros.h"
#include "main.h"

/*** Declaraciones externas */

extern int linenumber;
extern int yyerror (char*);

/*** Macros ***/
#define CHECK_REG_I() \
do { \
	if (yylval.ivalue >= TAM_REGISTROS) \
	  { \
	    sprintf(mensaje, "El rango de registros enteros es x0-x%d", TAM_REGISTROS-1); \
	    yyerror(mensaje); \
	  } \
} while(0)

#define CHECK_REG_F() \
do { \
	if (yylval.ivalue >= TAM_REGISTROS) \
	  { \
	    sprintf(mensaje, "El rango de registros de coma flotante es f0-f%d", TAM_REGISTROS-1); \
	    yyerror(mensaje); \
	  } \
} while(0)

/*** Variables locales */

static char mensaje[128];

%}

STRING   [A-Za-z0-9[:blank:]:]*
ALPHANUM [A-Za-z][A-Za-z0-9_]*
BLANK	 [ \t]+

O_PAR    [ \t]*"("

DEC_LIT	 ([-+]?[1-9][0-9]*)|0
OCT_LIT	 0[0-9]+
HEX_LIT	 "0x"[0-9a-fA-F]+
FP_LIT	 [+-]?([0-9]*"."[0-9]+([eE][-+]?[0-9]+)?|[0-9]+[eE][-+]?[0-9]+)

REGI     x[0-9]?[0-9]
REGF     f[0-9]?[0-9]

ABI_X_ZERO   "zero"
ABI_X_RA     "ra"
ABI_X_SP     "sp"
ABI_X_GP     "gp"
ABI_X_TP     "tp"
ABI_X_T0_2   "t"[0-2]
ABI_X_FP     "fp"
ABI_X_S0_1   "s"[0-1]
ABI_X_A0_7   "a"[0-7]
ABI_X_S2_9   "s"[2-9]
ABI_X_S10_11 "s1"[0-1]
ABI_X_T3_6   "t"[3-6]

ABI_F_FT0_7    "ft"[0-7]
ABI_F_FS0_1    "fs"[0-1]
ABI_F_FA0_7    "fa"[0-7]
ABI_F_FS2_9    "fs"[2-9]
ABI_F_FS10_11  "fs1"[0-1]
ABI_F_FT8_9    "ft"[8-9]
ABI_F_FT10_11  "ft1"[0-1]

FRM ("rne"|"rtz"|"rdn"|"rup"|"rmm")

%option noyywrap

%%

 /*** Comentarios y conversiones **/

 /* añadir un "$" no elimina correctamente el comentario de la ultima linea */
#.*				/* Elimina los comentarios */
{BLANK}			/* Borra los espacios en blanco */
[A-Z] { unput(tolower(yytext[0])); }
				/* Convierte todos las letras a minusculas */

[\n] {	linenumber++; 
	return NL; }

 /*** Elementos del formato de instrucción */

{DEC_LIT} {
	sscanf(yytext, "%" PRId64, &yylval.ivalue);
	return T_INT_LIT;
	}

{OCT_LIT} {
	sscanf(yytext, "%" PRIo64, &yylval.ivalue);
	return T_INT_LIT;
	}

{HEX_LIT} {
	sscanf(yytext, "%" PRIx64, &yylval.ivalue);
	return T_INT_LIT;
	}

{FP_LIT} {
	sscanf(yytext, "%lg", &yylval.fvalue);
	return T_FP_LIT;
	}

{ALPHANUM}/{O_PAR} {
	strcpy(yylval.cvalue, yytext);
	return T_ALPHANUM;
	}

{ALPHANUM}/"]" {
	strcpy(yylval.cvalue, yytext);
	return T_ALPHANUM;
	}

{REGF} {
	yylval.ivalue= atoi(yytext+1);
    CHECK_REG_F();
    /* Indica que se ha utilizado el formato fNN para el nombre del registro */
    yylval.ivalue -= TAM_REGISTROS;
	return REG_FP;
	}

{REGI} { 
	yylval.ivalue= atoi(yytext+1);
    CHECK_REG_I();
    /* Indica que se ha utilizado el formato fNN para el nombre del registro */
    yylval.ivalue -= TAM_REGISTROS;
	return REG_INT;
	}

{FRM} {
        sprintf(yylval.cvalue,"%s",yytext);   
        return FR_MODE;
}

"%hi" {
    return M_HI;
}

"%lo" {
    return M_LO;
}

"%disp" {
    return M_DISP;
}

 /*** Registers: ABI Names ***/

{ABI_X_ZERO} {
	yylval.ivalue= _zero; // zero -> x0
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_RA} {
	yylval.ivalue= _ra; // ra -> x1
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_SP} {
	yylval.ivalue= _sp; // sp -> x2
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_GP} {
	yylval.ivalue= _gp; // gp -> x3
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_TP} {
	yylval.ivalue= _tp; // tp -> x4
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_T0_2} {
	yylval.ivalue= _t0 + atoi(yytext+1); // t0-2 -> x5-7
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_FP} {
	yylval.ivalue= _fp; // fp -> x8
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_S0_1} {
	yylval.ivalue= _s0 + atoi(yytext+1); // s0-1 -> x8-9
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_A0_7} {
	yylval.ivalue= _a0 + atoi(yytext+1); // a0-7 -> x10-17
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_S2_9} {
	yylval.ivalue= _s2 + atoi(yytext+1)-2; // s2-9 -> x18-25
    CHECK_REG_I();
	return REG_INT; 
	}

{ABI_X_S10_11} {
	yylval.ivalue= _s10 + atoi(yytext+1)-10; // s10-11 -> x26-27
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_X_T3_6} {
	yylval.ivalue= _t3 + atoi(yytext+1)-3; // t3-6 -> x28-31
    CHECK_REG_I();
	return REG_INT;
	}

{ABI_F_FT0_7} {
	yylval.ivalue= _ft0 + atoi(yytext+2); // ft0-7 -> f0-7
    CHECK_REG_F();
	return REG_FP;
	}

{ABI_F_FS0_1} {
	yylval.ivalue= _fs0 + atoi(yytext+2); // fs0-1 -> f8-9
    CHECK_REG_F();
	return REG_FP;
	}

{ABI_F_FA0_7} {
	yylval.ivalue= _fa0 + atoi(yytext+2); // fa0-7 -> f10-17
    CHECK_REG_F();
	return REG_FP;
	}

{ABI_F_FS2_9} {
	yylval.ivalue= _fs2 + atoi(yytext+2)-2; // fs2-9 -> f18-25
    CHECK_REG_F();
	return REG_FP;
	}

{ABI_F_FS10_11} {
	yylval.ivalue= _fs10 + atoi(yytext+2)-10; // fs10-11 -> f26-27
    CHECK_REG_F();
	return REG_FP;
	}

{ABI_F_FT8_9} {
	yylval.ivalue= _ft8 + atoi(yytext+2)-8; // ft8-9 -> f28-29
    CHECK_REG_F();
	return REG_FP;
	}

{ABI_F_FT10_11} {
	yylval.ivalue= _ft10 + atoi(yytext+2)-10; // ft10-11 -> f30-31
    CHECK_REG_F();
	return REG_FP;
	}

{ALPHANUM}":" {
	strcpy(yylval.cvalue,yytext);
	yylval.cvalue[yyleng-1]= '\0';
	return LABEL; 
	}

"\""{STRING}"\"" { 
	strncpy(yylval.cvalue,&yytext[1],strlen(yytext)-2);
	yylval.cvalue[yyleng-2]= '\0';
	return T_STRING; 
	}

 /*** Directivas del ensamblador */

".data" {
	return DE_DATA;
	}
".text"	{ 
	return DE_TEXT;
	}

".byte"	{ 
	return DE_BYTE;
	} 
".half"	{
	// hay_half= SI;
	return DE_HALF;
	}
".word"	{ 
    // hay_word= SI;
	return DE_WORD;
	}
".dword" {
    // hay_dword= SI;
	return DE_DWORD;
	}
".float" {
    hay_float= SI;
	return DE_FLOAT;
	}
".double" {
    hay_double= SI;
	return DE_DOUBLE;
	}
".space" { 
	return DE_SPACE;
	}
".asciiz" { 
	// hay_char= SI;
	return DE_ASCIIZ;
	}

  /*** Directivas de ensamblador extendidas */

".ireg"	{
	return DE_IREG;
	}
".fpreg"	{
    return DE_FREG;
    }
".btb"	{
    return DE_BTB;
    }
".pc"	{
    return DE_PC;
    }

 /*** Instrucciones implementadas *******************************************/

"addi" {
    yylval.ivalue = RV32I_ADDI;
    return FORM_INT_RRI;
 }

"slti" {
    yylval.ivalue = RV32I_SLTI;
    return FORM_INT_RRI;
 }

"sltiu" {
    yylval.ivalue = RV32I_SLTIU;
    return FORM_INT_RRI;
 }

"andi" {
    yylval.ivalue = RV32I_ANDI;
    return FORM_INT_RRI;
 }

"ori" {
    yylval.ivalue = RV32I_ORI;
    return FORM_INT_RRI;
 }

"xori" {
    yylval.ivalue = RV32I_XORI;
    return FORM_INT_RRI;
 }

"lui" {
    yylval.ivalue = RV32I_LUI;
    return FORM_INT_RI;
 }

"auipc" {
    yylval.ivalue = RV32I_AUIPC;
    return FORM_INT_RA;
 }

"add" {
    yylval.ivalue = RV32I_ADD;
    return FORM_INT_RRR;
 }

"sub" {
    yylval.ivalue = RV32I_SUB;
    return FORM_INT_RRR;
 }

"and" {
    yylval.ivalue = RV32I_AND;
    return FORM_INT_RRR;
 }

"slt" {
    yylval.ivalue = RV32I_SLT;
    return FORM_INT_RRR;
 }

"sltu" {
    yylval.ivalue = RV32I_SLTU;
    return FORM_INT_RRR;
 }

"or" {
    yylval.ivalue = RV32I_OR;
    return FORM_INT_RRR;
 }

"xor" {
    yylval.ivalue = RV32I_XOR;
    return FORM_INT_RRR;
 }

"sll" {
    yylval.ivalue = RV32I_SLL;
    return FORM_INT_RRR;
 }

"srl" {
    yylval.ivalue = RV32I_SRL;
    return FORM_INT_RRR;
 }

"sra" {
    yylval.ivalue = RV32I_SRA;
    return FORM_INT_RRR;
 }

"jal" {
    yylval.ivalue = RV32I_JAL;
    return FORM_J_RA;
 }

"jalr" {
    yylval.ivalue = RV32I_JALR;
    return FORM_J_RRA;
 }

"beq" {
    yylval.ivalue = RV32I_BEQ;
    return FORM_INT_B_RRA;
 }

"bne" {
    yylval.ivalue = RV32I_BNE;
    return FORM_INT_B_RRA;
 }

"blt" {
    yylval.ivalue = RV32I_BLT;
    return FORM_INT_B_RRA;
 }

"bltu" {
    yylval.ivalue = RV32I_BLTU;
    return FORM_INT_B_RRA;
 }

"bge" {
    yylval.ivalue = RV32I_BGE;
    return FORM_INT_B_RRA;
 }

"bgeu" {
    yylval.ivalue = RV32I_BGEU;
    return FORM_INT_B_RRA;
 }

"lb" {
    yylval.ivalue = RV32I_LB;
    return FORM_INT_L_RSB;
 }

"lbu" {
    yylval.ivalue = RV32I_LBU;
    return FORM_INT_L_RSB;
 }

"lh" {
    yylval.ivalue = RV32I_LH;
    return FORM_INT_L_RSB;
 }

"lhu" {
    yylval.ivalue = RV32I_LHU;
    return FORM_INT_L_RSB;
 }

"lw" {
    yylval.ivalue = RV32I_LW;
    return FORM_INT_L_RSB;
 }

"sb" {
    yylval.ivalue = RV32I_SB;
    return FORM_INT_S_RSB;
 }

"sh" {
    yylval.ivalue = RV32I_SH;
    return FORM_INT_S_RSB;
 }

"sw" {
    yylval.ivalue = RV32I_SW;
    return FORM_INT_S_RSB;
 }

"csrrw" {
    yylval.ivalue = RV32I_CSRRW;
    return FORM_CSR_RxR;
 }

"csrrs" {
    yylval.ivalue = RV32I_CSRRS;
    return FORM_CSR_RxR;
 }

"csrrc" {
    yylval.ivalue = RV32I_CSRRC;
    return FORM_CSR_RxR;
 }

"csrrwi" {
    yylval.ivalue = RV32I_CSRRWI;
    return FORM_CSR_RxI;
 }

"csrrsi" {
    yylval.ivalue = RV32I_CSRRSI;
    return FORM_CSR_RxI;
 }

"csrrci" {
    yylval.ivalue = RV32I_CSRRCI;
    return FORM_CSR_RxI;
 }

"ecall" {
    yylval.ivalue = RV32I_ECALL;
    return FORM_INT_ECALL;
 }

"ebreak" {
    yylval.ivalue = RV32I_EBREAK;
    return FORM_INT_EBREAK;
 }

"mul" {
    yylval.ivalue = RV32M_MUL;
    return FORM_INT_RRR;
 }

"mulh" {
    yylval.ivalue = RV32M_MULH;
    return FORM_INT_RRR;
 }

"mulhsu" {
    yylval.ivalue = RV32M_MULHSU;
    return FORM_INT_RRR;
 }

"mulhu" {
    yylval.ivalue = RV32M_MULHU;
    return FORM_INT_RRR;
 }

"div" {
    yylval.ivalue = RV32M_DIV;
    return FORM_INT_RRR;
 }

"divu" {
    yylval.ivalue = RV32M_DIVU;
    return FORM_INT_RRR;
 }

"rem" {
    yylval.ivalue = RV32M_REM;
    return FORM_INT_RRR;
 }

"remu" {
    yylval.ivalue = RV32M_REMU;
    return FORM_INT_RRR;
 }

"flw" {
    yylval.ivalue = RV32F_FLW;
    return FORM_FP_L_FSB;
 }

"fsw" {
    yylval.ivalue = RV32F_FSW;
    return FORM_FP_S_FSB;
 }

"fmadd.s" {
    yylval.ivalue = RV32F_FMADD_S;
    return FORM_FP_FFFFr;
 }

"fmsub.s" {
    yylval.ivalue = RV32F_FMSUB_S;
    return FORM_FP_FFFFr;
 }

"fnmsub.s" {
    yylval.ivalue = RV32F_FNMSUB_S;
    return FORM_FP_FFFFr;
 }

"fnmadd.s" {
    yylval.ivalue = RV32F_FNMADD_S;
    return FORM_FP_FFFFr;
 }

"fadd.s" {
    yylval.ivalue = RV32F_FADD_S;
    return FORM_FP_FFFr;
 }

"fsub.s" {
    yylval.ivalue = RV32F_FSUB_S;
    return FORM_FP_FFFr;
 }

"fmul.s" {
    yylval.ivalue = RV32F_FMUL_S;
    return FORM_FP_FFFr;
 }

"fdiv.s" {
    yylval.ivalue = RV32F_FDIV_S;
    return FORM_FP_FFFr;
 }

"fsqrt.s" {
    yylval.ivalue = RV32F_FSQRT_S;
    return FORM_FP_FFr;
 }

"fsgnj.s" {
    yylval.ivalue = RV32F_FSGNJ_S;
    return FORM_FP_FFF;
 }

"fsgnjn.s" {
    yylval.ivalue = RV32F_FSGNJN_S;
    return FORM_FP_FFF;
 }

"fsgnjx.s" {
    yylval.ivalue = RV32F_FSGNJX_S;
    return FORM_FP_FFF;
 }

"fmin.s" {
    yylval.ivalue = RV32F_FMIN_S;
    return FORM_FP_FFF;
 }

"fmax.s" {
    yylval.ivalue = RV32F_FMAX_S;
    return FORM_FP_FFF;
 }

"fcvt.w.s" {
    yylval.ivalue = RV32F_FCVT_W_S;
    return FORM_FP_RFr;
 }

"fcvt.wu.s" {
    yylval.ivalue = RV32F_FCVT_WU_S;
    return FORM_FP_RFr;
 }

"fmv.x.w" {
    yylval.ivalue = RV32F_FMV_X_W;
    return FORM_FP_RF;
 }

"feq.s" {
    yylval.ivalue = RV32F_FEQ_S;
    return FORM_FP_RFF;
 }

"flt.s" {
    yylval.ivalue = RV32F_FLT_S;
    return FORM_FP_RFF;
 }

"fle.s" {
    yylval.ivalue = RV32F_FLE_S;
    return FORM_FP_RFF;
 }

"fclass.s" {
    yylval.ivalue = RV32F_FCLASS_S;
    return FORM_FP_RF;
 }

"fcvt.s.w" {
    yylval.ivalue = RV32F_FCVT_S_W;
    return FORM_FP_FRr;
 }

"fcvt.s.wu" {
    yylval.ivalue = RV32F_FCVT_S_WU;
    return FORM_FP_FRr;
 }

"fmv.w.x" {
    yylval.ivalue = RV32F_FMV_W_X;
    return FORM_FP_FR;
 }

"fld" {
    yylval.ivalue = RV32D_FLD;
    return FORM_FP_L_FSB;
 }

"fsd" {
    yylval.ivalue = RV32D_FSD;
    return FORM_FP_S_FSB;
 }

"fmadd.d" {
    yylval.ivalue = RV32D_FMADD_D;
    return FORM_FP_FFFFr;
 }

"fmsub.d" {
    yylval.ivalue = RV32D_FMSUB_D;
    return FORM_FP_FFFFr;
 }

"fnmsub.d" {
    yylval.ivalue = RV32D_FNMSUB_D;
    return FORM_FP_FFFFr;
 }

"fnmadd.d" {
    yylval.ivalue = RV32D_FNMADD_D;
    return FORM_FP_FFFFr;
 }

"fadd.d" {
    yylval.ivalue = RV32D_FADD_D;
    return FORM_FP_FFFr;
 }

"fsub.d" {
    yylval.ivalue = RV32D_FSUB_D;
    return FORM_FP_FFFr;
 }

"fmul.d" {
    yylval.ivalue = RV32D_FMUL_D;
    return FORM_FP_FFFr;
 }

"fdiv.d" {
    yylval.ivalue = RV32D_FDIV_D;
    return FORM_FP_FFFr;
 }

"fsqrt.d" {
    yylval.ivalue = RV32D_FSQRT_D;
    return FORM_FP_FFr;
 }

"fsgnj.d" {
    yylval.ivalue = RV32D_FSGNJ_D;
    return FORM_FP_FFF;
 }

"fsgnjn.d" {
    yylval.ivalue = RV32D_FSGNJN_D;
    return FORM_FP_FFF;
 }

"fsgnjx.d" {
    yylval.ivalue = RV32D_FSGNJX_D;
    return FORM_FP_FFF;
 }

"fmin.d" {
    yylval.ivalue = RV32D_FMIN_D;
    return FORM_FP_FFF;
 }

"fmax.d" {
    yylval.ivalue = RV32D_FMAX_D;
    return FORM_FP_FFF;
 }

"fcvt.s.d" {
    yylval.ivalue = RV32D_FCVT_S_D;
    return FORM_FP_FFr;
 }

"fcvt.d.s" {
    yylval.ivalue = RV32D_FCVT_D_S;
    return FORM_FP_FFr;
 }

"feq.d" {
    yylval.ivalue = RV32D_FEQ_D;
    return FORM_FP_RFF;
 }

"flt.d" {
    yylval.ivalue = RV32D_FLT_D;
    return FORM_FP_RFF;
 }

"fle.d" {
    yylval.ivalue = RV32D_FLE_D;
    return FORM_FP_RFF;
 }

"fclass.d" {
    yylval.ivalue = RV32D_FCLASS_D;
    return FORM_FP_RF;
 }

"fcvt.w.d" {
    yylval.ivalue = RV32D_FCVT_W_D;
    return FORM_FP_RFr;
 }

"fcvt.wu.d" {
    yylval.ivalue = RV32D_FCVT_WU_D;
    return FORM_FP_RFr;
 }

"fcvt.d.w" {
    yylval.ivalue = RV32D_FCVT_D_W;
    return FORM_FP_FRr;
 }

"fcvt.d.wu" {
    yylval.ivalue = RV32D_FCVT_D_WU;
    return FORM_FP_FRr;
 }

"lr.w" {
    yylval.ivalue = RV32A_LR_W;
    return FORM_INT_RB;
 }

"sc.w" {
    yylval.ivalue = RV32A_SC_W;
    return FORM_INT_RRB;
 }

"amoswap.w" {
    yylval.ivalue = RV32A_AMOSWAP_W;
    return FORM_INT_RRB;
 }

"amoadd.w" {
    yylval.ivalue = RV32A_AMOADD_W;
    return FORM_INT_RRB;
 }

"amoxor.w" {
    yylval.ivalue = RV32A_AMOXOR_W;
    return FORM_INT_RRB;
 }

"amoand.w" {
    yylval.ivalue = RV32A_AMOAND_W;
    return FORM_INT_RRB;
 }

"amoor.w" {
    yylval.ivalue = RV32A_AMOOR_W;
    return FORM_INT_RRB;
 }

"amomin.w" {
    yylval.ivalue = RV32A_AMOMIN_W;
    return FORM_INT_RRB;
 }

"amomax.w" {
    yylval.ivalue = RV32A_AMOMAX_W;
    return FORM_INT_RRB;
 }

"amominu.w" {
    yylval.ivalue = RV32A_AMOMINU_W;
    return FORM_INT_RRB;
 }

"amomaxu.w" {
    yylval.ivalue = RV32A_AMOMAXU_W;
    return FORM_INT_RRB;
 }

"lr.w.aq" {
    yylval.ivalue = RV32A_LR_W_AQ;
    return FORM_INT_RB;
 }

"sc.w.aq" {
    yylval.ivalue = RV32A_SC_W_AQ;
    return FORM_INT_RRB;
 }

"amoswap.w.aq" {
    yylval.ivalue = RV32A_AMOSWAP_W_AQ;
    return FORM_INT_RRB;
 }

"amoadd.w.aq" {
    yylval.ivalue = RV32A_AMOADD_W_AQ;
    return FORM_INT_RRB;
 }

"amoxor.w.aq" {
    yylval.ivalue = RV32A_AMOXOR_W_AQ;
    return FORM_INT_RRB;
 }

"amoand.w.aq" {
    yylval.ivalue = RV32A_AMOAND_W_AQ;
    return FORM_INT_RRB;
 }

"amoor.w.aq" {
    yylval.ivalue = RV32A_AMOOR_W_AQ;
    return FORM_INT_RRB;
 }

"amomin.w.aq" {
    yylval.ivalue = RV32A_AMOMIN_W_AQ;
    return FORM_INT_RRB;
 }

"amomax.w.aq" {
    yylval.ivalue = RV32A_AMOMAX_W_AQ;
    return FORM_INT_RRB;
 }

"amominu.w.aq" {
    yylval.ivalue = RV32A_AMOMINU_W_AQ;
    return FORM_INT_RRB;
 }

"amomaxu.w.aq" {
    yylval.ivalue = RV32A_AMOMAXU_W_AQ;
    return FORM_INT_RRB;
 }

"lr.w.rl" {
    yylval.ivalue = RV32A_LR_W_RL;
    return FORM_INT_RB;
 }

"sc.w.rl" {
    yylval.ivalue = RV32A_SC_W_RL;
    return FORM_INT_RRB;
 }

"amoswap.w.rl" {
    yylval.ivalue = RV32A_AMOSWAP_W_RL;
    return FORM_INT_RRB;
 }

"amoadd.w.rl" {
    yylval.ivalue = RV32A_AMOADD_W_RL;
    return FORM_INT_RRB;
 }

"amoxor.w.rl" {
    yylval.ivalue = RV32A_AMOXOR_W_RL;
    return FORM_INT_RRB;
 }

"amoand.w.rl" {
    yylval.ivalue = RV32A_AMOAND_W_RL;
    return FORM_INT_RRB;
 }

"amoor.w.rl" {
    yylval.ivalue = RV32A_AMOOR_W_RL;
    return FORM_INT_RRB;
 }

"amomin.w.rl" {
    yylval.ivalue = RV32A_AMOMIN_W_RL;
    return FORM_INT_RRB;
 }

"amomax.w.rl" {
    yylval.ivalue = RV32A_AMOMAX_W_RL;
    return FORM_INT_RRB;
 }

"amominu.w.rl" {
    yylval.ivalue = RV32A_AMOMINU_W_RL;
    return FORM_INT_RRB;
 }

"amomaxu.w.rl" {
    yylval.ivalue = RV32A_AMOMAXU_W_RL;
    return FORM_INT_RRB;
 }

"lr.w.aqrl" {
    yylval.ivalue = RV32A_LR_W_AQRL;
    return FORM_INT_RB;
 }

"sc.w.aqrl" {
    yylval.ivalue = RV32A_SC_W_AQRL;
    return FORM_INT_RRB;
 }

"amoswap.w.aqrl" {
    yylval.ivalue = RV32A_AMOSWAP_W_AQRL;
    return FORM_INT_RRB;
 }

"amoadd.w.aqrl" {
    yylval.ivalue = RV32A_AMOADD_W_AQRL;
    return FORM_INT_RRB;
 }

"amoxor.w.aqrl" {
    yylval.ivalue = RV32A_AMOXOR_W_AQRL;
    return FORM_INT_RRB;
 }

"amoand.w.aqrl" {
    yylval.ivalue = RV32A_AMOAND_W_AQRL;
    return FORM_INT_RRB;
 }

"amoor.w.aqrl" {
    yylval.ivalue = RV32A_AMOOR_W_AQRL;
    return FORM_INT_RRB;
 }

"amomin.w.aqrl" {
    yylval.ivalue = RV32A_AMOMIN_W_AQRL;
    return FORM_INT_RRB;
 }

"amomax.w.aqrl" {
    yylval.ivalue = RV32A_AMOMAX_W_AQRL;
    return FORM_INT_RRB;
 }

"amominu.w.aqrl" {
    yylval.ivalue = RV32A_AMOMINU_W_AQRL;
    return FORM_INT_RRB;
 }

"amomaxu.w.aqrl" {
    yylval.ivalue = RV32A_AMOMAXU_W_AQRL;
    return FORM_INT_RRB;
 }

"lwu" {
    yylval.ivalue = RV64I_LWU;
    return FORM_INT_L_RSB;
 }

"ld" {
    yylval.ivalue = RV64I_LD;
    return FORM_INT_L_RSB;
 }

"sd" {
    yylval.ivalue = RV64I_SD;
    return FORM_INT_S_RSB;
 }

"addiw" {
    yylval.ivalue = RV64I_ADDIW;
    return FORM_INT_RRI;
 }

"slli" {
    yylval.ivalue = RV64I_SLLI;
    return FORM_INT_RRSH;
 }

"srli" {
    yylval.ivalue = RV64I_SRLI;
    return FORM_INT_RRSH;
 }

"srai" {
    yylval.ivalue = RV64I_SRAI;
    return FORM_INT_RRSH;
 }

"slliw" {
    yylval.ivalue = RV64I_SLLIW;
    return FORM_INT_RRSH;
 }

"srliw" {
    yylval.ivalue = RV64I_SRLIW;
    return FORM_INT_RRSH;
 }

"sraiw" {
    yylval.ivalue = RV64I_SRAIW;
    return FORM_INT_RRSH;
 }

"addw" {
    yylval.ivalue = RV64I_ADDW;
    return FORM_INT_RRR;
 }

"subw" {
    yylval.ivalue = RV64I_SUBW;
    return FORM_INT_RRR;
 }

"sllw" {
    yylval.ivalue = RV64I_SLLW;
    return FORM_INT_RRR;
 }

"srlw" {
    yylval.ivalue = RV64I_SRLW;
    return FORM_INT_RRR;
 }

"sraw" {
    yylval.ivalue = RV64I_SRAW;
    return FORM_INT_RRR;
 }

"mulw" {
    yylval.ivalue = RV64M_MULW;
    return FORM_INT_RRR;
 }

"divw" {
    yylval.ivalue = RV64M_DIVW;
    return FORM_INT_RRR;
 }

"divuw" {
    yylval.ivalue = RV64M_DIVUW;
    return FORM_INT_RRR;
 }

"remw" {
    yylval.ivalue = RV64M_REMW;
    return FORM_INT_RRR;
 }

"remuw" {
    yylval.ivalue = RV64M_REMUW;
    return FORM_INT_RRR;
 }

"lr.d" {
    yylval.ivalue = RV64A_LR_D;
    return FORM_INT_RB;
 }

"sc.d" {
    yylval.ivalue = RV64A_SC_D;
    return FORM_INT_RRB;
 }

"amoswap.d" {
    yylval.ivalue = RV64A_AMOSWAP_D;
    return FORM_INT_RRB;
 }

"amoadd.d" {
    yylval.ivalue = RV64A_AMOADD_D;
    return FORM_INT_RRB;
 }

"amoxor.d" {
    yylval.ivalue = RV64A_AMOXOR_D;
    return FORM_INT_RRB;
 }

"amoand.d" {
    yylval.ivalue = RV64A_AMOAND_D;
    return FORM_INT_RRB;
 }

"amoor.d" {
    yylval.ivalue = RV64A_AMOOR_D;
    return FORM_INT_RRB;
 }

"amomin.d" {
    yylval.ivalue = RV64A_AMOMIN_D;
    return FORM_INT_RRB;
 }

"amomax.d" {
    yylval.ivalue = RV64A_AMOMAX_D;
    return FORM_INT_RRB;
 }

"amominu.d" {
    yylval.ivalue = RV64A_AMOMINU_D;
    return FORM_INT_RRB;
 }

"amomaxu.d" {
    yylval.ivalue = RV64A_AMOMAXU_D;
    return FORM_INT_RRB;
 }

"lr.d.aq" {
    yylval.ivalue = RV64A_LR_D_AQ;
    return FORM_INT_RB;
 }

"sc.d.aq" {
    yylval.ivalue = RV64A_SC_D_AQ;
    return FORM_INT_RRB;
 }

"amoswap.d.aq" {
    yylval.ivalue = RV64A_AMOSWAP_D_AQ;
    return FORM_INT_RRB;
 }

"amoadd.d.aq" {
    yylval.ivalue = RV64A_AMOADD_D_AQ;
    return FORM_INT_RRB;
 }

"amoxor.d.aq" {
    yylval.ivalue = RV64A_AMOXOR_D_AQ;
    return FORM_INT_RRB;
 }

"amoand.d.aq" {
    yylval.ivalue = RV64A_AMOAND_D_AQ;
    return FORM_INT_RRB;
 }

"amoor.d.aq" {
    yylval.ivalue = RV64A_AMOOR_D_AQ;
    return FORM_INT_RRB;
 }

"amomin.d.aq" {
    yylval.ivalue = RV64A_AMOMIN_D_AQ;
    return FORM_INT_RRB;
 }

"amomax.d.aq" {
    yylval.ivalue = RV64A_AMOMAX_D_AQ;
    return FORM_INT_RRB;
 }

"amominu.d.aq" {
    yylval.ivalue = RV64A_AMOMINU_D_AQ;
    return FORM_INT_RRB;
 }

"amomaxu.d.aq" {
    yylval.ivalue = RV64A_AMOMAXU_D_AQ;
    return FORM_INT_RRB;
 }

"lr.d.rl" {
    yylval.ivalue = RV64A_LR_D_RL;
    return FORM_INT_RB;
 }

"sc.d.rl" {
    yylval.ivalue = RV64A_SC_D_RL;
    return FORM_INT_RRB;
 }

"amoswap.d.rl" {
    yylval.ivalue = RV64A_AMOSWAP_D_RL;
    return FORM_INT_RRB;
 }

"amoadd.d.rl" {
    yylval.ivalue = RV64A_AMOADD_D_RL;
    return FORM_INT_RRB;
 }

"amoxor.d.rl" {
    yylval.ivalue = RV64A_AMOXOR_D_RL;
    return FORM_INT_RRB;
 }

"amoand.d.rl" {
    yylval.ivalue = RV64A_AMOAND_D_RL;
    return FORM_INT_RRB;
 }

"amoor.d.rl" {
    yylval.ivalue = RV64A_AMOOR_D_RL;
    return FORM_INT_RRB;
 }

"amomin.d.rl" {
    yylval.ivalue = RV64A_AMOMIN_D_RL;
    return FORM_INT_RRB;
 }

"amomax.d.rl" {
    yylval.ivalue = RV64A_AMOMAX_D_RL;
    return FORM_INT_RRB;
 }

"amominu.d.rl" {
    yylval.ivalue = RV64A_AMOMINU_D_RL;
    return FORM_INT_RRB;
 }

"amomaxu.d.rl" {
    yylval.ivalue = RV64A_AMOMAXU_D_RL;
    return FORM_INT_RRB;
 }

"lr.d.aqrl" {
    yylval.ivalue = RV64A_LR_D_AQRL;
    return FORM_INT_RB;
 }

"sc.d.aqrl" {
    yylval.ivalue = RV64A_SC_D_AQRL;
    return FORM_INT_RRB;
 }

"amoswap.d.aqrl" {
    yylval.ivalue = RV64A_AMOSWAP_D_AQRL;
    return FORM_INT_RRB;
 }

"amoadd.d.aqrl" {
    yylval.ivalue = RV64A_AMOADD_D_AQRL;
    return FORM_INT_RRB;
 }

"amoxor.d.aqrl" {
    yylval.ivalue = RV64A_AMOXOR_D_AQRL;
    return FORM_INT_RRB;
 }

"amoand.d.aqrl" {
    yylval.ivalue = RV64A_AMOAND_D_AQRL;
    return FORM_INT_RRB;
 }

"amoor.d.aqrl" {
    yylval.ivalue = RV64A_AMOOR_D_AQRL;
    return FORM_INT_RRB;
 }

"amomin.d.aqrl" {
    yylval.ivalue = RV64A_AMOMIN_D_AQRL;
    return FORM_INT_RRB;
 }

"amomax.d.aqrl" {
    yylval.ivalue = RV64A_AMOMAX_D_AQRL;
    return FORM_INT_RRB;
 }

"amominu.d.aqrl" {
    yylval.ivalue = RV64A_AMOMINU_D_AQRL;
    return FORM_INT_RRB;
 }

"amomaxu.d.aqrl" {
    yylval.ivalue = RV64A_AMOMAXU_D_AQRL;
    return FORM_INT_RRB;
 }

"fcvt.l.s" {
    yylval.ivalue = RV64F_FCVT_L_S;
    return FORM_FP_RFr;
 }

"fcvt.lu.s" {
    yylval.ivalue = RV64F_FCVT_LU_S;
    return FORM_FP_RFr;
 }

"fcvt.s.l" {
    yylval.ivalue = RV64F_FCVT_S_L;
    return FORM_FP_FRr;
 }

"fcvt.s.lu" {
    yylval.ivalue = RV64F_FCVT_S_LU;
    return FORM_FP_FRr;
 }

"fcvt.l.d" {
    yylval.ivalue = RV64D_FCVT_L_D;
    return FORM_FP_RFr;
 }

"fcvt.lu.d" {
    yylval.ivalue = RV64D_FCVT_LU_D;
    return FORM_FP_RFr;
 }

"fmv.x.d" {
    yylval.ivalue = RV64D_FMV_X_D;
    return FORM_FP_RF;
 }

"fcvt.d.l" {
    yylval.ivalue = RV64D_FCVT_D_L;
    return FORM_FP_FRr;
 }

"fcvt.d.lu" {
    yylval.ivalue = RV64D_FCVT_D_LU;
    return FORM_FP_FRr;
 }

"fmv.d.x" {
    yylval.ivalue = RV64D_FMV_D_X;
    return FORM_FP_FR;
 }

"nop" {
    yylval.ivalue = PSEUDO_NOP;
    return FORM_PSEUDO_NOP;
 }

"neg" {
    yylval.ivalue = PSEUDO_NEG;
    return FORM_PSEUDO_RR;
 }

"negw" {
    yylval.ivalue = PSEUDO_NEGW;
    return FORM_PSEUDO_RR;
 }

"snez" {
    yylval.ivalue = PSEUDO_SNEZ;
    return FORM_PSEUDO_RR;
 }

"sltz" {
    yylval.ivalue = PSEUDO_SLTZ;
    return FORM_PSEUDO_RR;
 }

"sgtz" {
    yylval.ivalue = PSEUDO_SGTZ;
    return FORM_PSEUDO_RR;
 }

"beqz" {
    yylval.ivalue = PSEUDO_BEQZ;
    return FORM_PSEUDO_BRA;
 }

"bnez" {
    yylval.ivalue = PSEUDO_BNEZ;
    return FORM_PSEUDO_BRA;
 }

"blez" {
    yylval.ivalue = PSEUDO_BLEZ;
    return FORM_PSEUDO_BRA;
 }

"bgez" {
    yylval.ivalue = PSEUDO_BGEZ;
    return FORM_PSEUDO_BRA;
 }

"bltz" {
    yylval.ivalue = PSEUDO_BLTZ;
    return FORM_PSEUDO_BRA;
 }

"bgtz" {
    yylval.ivalue = PSEUDO_BGTZ;
    return FORM_PSEUDO_BRA;
 }

"j" {
    yylval.ivalue = PSEUDO_J;
    return FORM_PSEUDO_J;
 }

"jr" {
    yylval.ivalue = PSEUDO_JR;
    return FORM_PSEUDO_JR;
 }

"ret" {
    yylval.ivalue = PSEUDO_RET;
    return FORM_PSEUDO_RET;
 }

"tail" {
    yylval.ivalue = PSEUDO_TAIL;
    return FORM_PSEUDO_TAIL;
 }

"rdinsret" {
    yylval.ivalue = PSEUDO_RDINSRET;
    return FORM_PSEUDO_R;
 }

"rdinsreth" {
    yylval.ivalue = PSEUDO_RDINSRETH;
    return FORM_PSEUDO_R;
 }

"rdcycle" {
    yylval.ivalue = PSEUDO_RDCYCLE;
    return FORM_PSEUDO_R;
 }

"rdcycleh" {
    yylval.ivalue = PSEUDO_RDCYCLEH;
    return FORM_PSEUDO_R;
 }

"rdtime" {
    yylval.ivalue = PSEUDO_RDTIME;
    return FORM_PSEUDO_R;
 }

"rdtimeh" {
    yylval.ivalue = PSEUDO_RDTIMEH;
    return FORM_PSEUDO_R;
 }

"lla" {
    yylval.ivalue = PSEUDO_LLA;
    return FORM_PSEUDO_LLA;
 }

"la" {
    yylval.ivalue = PSEUDO_LA;
    return FORM_PSEUDO_LLA;
 }

"li" {
    yylval.ivalue = PSEUDO_LI;
    return FORM_PSEUDO_LI;
 }

"mv" {
    yylval.ivalue = PSEUDO_MV;
    return FORM_PSEUDO_RRi;
 }

"not" {
    yylval.ivalue = PSEUDO_NOT;
    return FORM_PSEUDO_RRi;
 }

"sext.w" {
    yylval.ivalue = PSEUDO_SEXT_W;
    return FORM_PSEUDO_RRi;
 }

"seqz" {
    yylval.ivalue = PSEUDO_SEQZ;
    return FORM_PSEUDO_RRi;
 }

"fmv.s" {
    yylval.ivalue = PSEUDO_FMV_S;
    return FORM_PSEUDO_FF;
 }

"fabs.s" {
    yylval.ivalue = PSEUDO_FABS_S;
    return FORM_PSEUDO_FF;
 }

"fneg.s" {
    yylval.ivalue = PSEUDO_FNEG_S;
    return FORM_PSEUDO_FF;
 }

"fmv.d" {
    yylval.ivalue = PSEUDO_FMV_D;
    return FORM_PSEUDO_FF;
 }

"fabs.d" {
    yylval.ivalue = PSEUDO_FABS_D;
    return FORM_PSEUDO_FF;
 }

"fneg.d" {
    yylval.ivalue = PSEUDO_FNEG_D;
    return FORM_PSEUDO_FF;
 }

"bgt" {
    yylval.ivalue = PSEUDO_BGT;
    return FORM_PSEUDO_BRRA;
 }

"ble" {
    yylval.ivalue = PSEUDO_BLE;
    return FORM_PSEUDO_BRRA;
 }

"bgtu" {
    yylval.ivalue = PSEUDO_BGTU;
    return FORM_PSEUDO_BRRA;
 }

"bleu" {
    yylval.ivalue = PSEUDO_BLEU;
    return FORM_PSEUDO_BRRA;
 }

"call" {
    yylval.ivalue = PSEUDO_CALL;
    return FORM_PSEUDO_CALL;
 }

"trap" {
    yylval.ivalue = PSEUDO_TRAP;
    return FORM_PSEUDO_TRAP;
 }



{ALPHANUM} {
	strcpy(yylval.cvalue, yytext);
	return T_ALPHANUM;
	}

 /*** Control de errores ****************************************************/

"."{ALPHANUM} { 
	yyerror("Directiva de ensamblador desconocida"); 
	}

. { 
	return yytext[0]; }
