#BlueJ class context
comment0.target=HashTable
comment0.text=\n\ HashTable\:\ implementation\ of\ a\ Linked\ Hash\ Table\n\ whose\ buckets,\ or\ collision\ lists,\ are\ represented\n\ through\ Lists\ with\ POI\ of\ HashEntry<K,V>.\n\ \n\ @param\ <K>\ \ the\ keys'\ type\ in\ the\ Map\n\ @param\ <V>\ \ the\ values'\ type\ in\ the\ Map\n\ \n\ @author\ (EDA-QA)\ \n\ @version\ (Curso\ 2023-2024)\n
comment1.params=b
comment1.target=void\ setRehashing(boolean)
comment10.params=
comment10.target=libraries.dataStructures.models.ListPOI\ keys()
comment10.text=Returns\ a\ ListPOI\ with\ the\ size()\ keys\ of\ a\ Hash\ Table
comment11.params=
comment11.target=java.lang.String\ toString()
comment11.text=\ Returns\ a\ String\ with\ the\ Entries\ of\ a\ Hash\ Table\nin\ a\ given\ text\ format\ (see\ HashEntry\#toString())
comment12.params=k
comment12.target=java.lang.Object\ get(java.lang.Object)
comment12.text=\ Returns\ the\ value\ of\ the\ Entry\ with\ Key\ k\ of\ a\nHash\ Table,\ or\ null\ if\ no\ such\ entry\ exists\ in\ the\ Table
comment13.params=k
comment13.target=java.lang.Object\ remove(java.lang.Object)
comment13.text=\ Removes\ the\ Entry\ with\ Key\ k\ from\ a\ Hash\ Table\ and\n\ \ returns\ its\ associated\ value,\ or\ null\ if\ that\ entry\ndoes\ not\ appear\ in\ the\ Table
comment14.params=k\ v
comment14.target=java.lang.Object\ put(java.lang.Object,\ java.lang.Object)
comment14.text=\ Inserts\ the\ Entry(k,\ v)\ in\ a\ Hash\ Table\ and\n\ \ returns\ the\ old\ value\ associated\ to\ k,\ or\ null\nif\ no\ old\ entry\ existed\ in\ the\ Table
comment15.params=
comment15.target=void\ rehashing()
comment15.text=\ Method\ that\ implements\ Rehashing.\ For\ obvious\ reasons,\nrhCount\ MUSTN'T\ be\ re-initialized.
comment16.params=
comment16.target=double\ standardDeviation()
comment16.text=\ Returns\ the\ standard\ deviation\ of\ the\ bucket\ sizes\nin\ a\ Linked\ Hash\ Table
comment17.params=
comment17.target=double\ avgLookUpCost()
comment17.text=\ Returns\ the\ average\ cost\ to\ locate\ a\ key\ of\n\ \ a\ Linked\ Hash\ Table,\ computed\ based\ on\ the\n\ \ number\ of\ collisions\ produced\ when\ locating\n\ \ its\ 'size'\ keys.\n
comment18.params=
comment18.target=java.lang.String\ histogram()
comment18.text=\ Returns\ a\ String\ with\ the\ occupation\ histogram\n\ \ of\ a\ Linked\ Hash\ Table\ in\ textual\ format.\ Thus,\n\ \ each\ of\ its\ two\ lines\ show\ two\ integer\ values\n\ \ separated\ by\ a\ tab\:\ the\ bucket\ length\ (int\ in\ [0,\ 9])\n\ \ and\ the\ number\ of\ buckets\ with\ that\ length.\n\ \ ATTENTION\:\ the\ number\ of\ buckets\ in\ each\ line\ i\ IS\:\n\ \ (a)\ 0\ <\=\ i\ <\=\ 8\:\ the\ number\ of\ buckets\ in\ the\ Table\n\ \ \ \ \ \ with\ exactly\ i\ elements\ (size\ \=\=\ i)\n\ \ (b)\ i\ \=\=\ 9\ (last\ line)\:\ the\ number\ of\ buckets\ in\ the\n\ \ \ \ \ \ Table\ that\ contain\ 9\ or\ more\ elements.\n
comment2.params=k
comment2.target=int\ hashIndex(java.lang.Object)
comment2.text=\n\ Returns\ the\ hash\ index\ of\ a\ given\ Entry's\ Key\ k,\n\ i.e.\ the\ index\ of\ the\ bucket\ in\ which\ the\ Entry\ should\n\ be\ placed.\n
comment3.params=estimatedMaxSize
comment3.target=HashTable(int)
comment3.text=\ Creates\ an\ empty\ HashTable,\ with\ estimatedMaxSize\nentries\ and\ load\ factor\ 0.75
comment4.params=n
comment4.target=int\ nextPrime(int)
comment4.text=\n\ Returns\ a\ prime\ number\ GREATER\ or\ EQUAL\ to\ n,\ni.e.\ the\ first\ prime\ after\ n.
comment5.params=n
comment5.target=boolean\ isPrime(int)
comment5.text=Checks\ whether\ n\ is\ a\ prime\ number
comment6.params=
comment6.target=double\ loadFactor()
comment6.text=\ Returns\ the\ (real)\ load\ factor\ of\ a\ Hash\ Table,\n\ \ which\ is\ equivalent\ to\ the\ average\ length\ of\ its\nbuckets\ in\ a\ Linked\ implementation\ of\ the\ Table
comment7.params=
comment7.target=boolean\ isEmpty()
comment7.text=\ Checks\ whether\ a\ Hash\ Table\ is\ empty,\ni.e.\ if\ it\ has\ 0\ Entries
comment8.params=
comment8.target=int\ size()
comment8.text=Returns\ the\ size,\ or\ number\ of\ Entries\ of\ a\ Hash\ Table.
comment9.params=
comment9.target=int\ numberOfRehashings()
comment9.text=\ Returns\ the\ number\ of\ Rehashing\ operations\ that\nhave\ been\ performed\ during\ the\ Hash\ Table\ operation
numComments=19
